
#ifndef ORIGINAL_H
#define ORIGINAL_H
// This file is computer-generated by onnx2c 
// (TODO: add creating command line here)
// (TODO: print creation date here )

// ONNX model:
// produced by pytorch, version 1.11.0
// ONNX IR version: 9
// Model documentation: 
/*

*/

#include <float.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#define MAX(X,Y) ( X > Y ? X : Y)
#define MIN(X,Y) ( X < Y ? X : Y)
#define CLIP(X,L) ( MAX(MIN(X,L), -L) )

static const float tensor_Gemm_0_weight[3][4] = 
{
  {0.022746980190277099609f, 0.48240897059440612793f, -0.66449630260467529297f, -0.097783580422401428223f},
  {-0.035068854689598083496f, 1.0564523935317993164f, -1.3528565168380737305f, -1.5860737562179565430f},
  {0.36555144190788269043f, -0.12483724951744079590f, -0.33078035712242126465f, 0.53334462642669677734f}
};
static const float tensor_Gemm_0_bias[3] = 
{0.31315991282463073730f, 1.7548868656158447266f, 0.14008250832557678223f};
static const float tensor_Gemm_1_weight[3][3] = 
{
  {-0.38604980707168579102f, -0.47383221983909606934f, -0.099718324840068817139f},
  {0.70692908763885498047f, 2.7978448867797851562f, -0.26916131377220153809f},
  {-0.21949179470539093018f, -0.036347098648548126221f, 0.52530980110168457031f}
};
static const float tensor_Gemm_1_bias[3] = 
{-0.20323885977268218994f, 0.10663963854312896729f, -0.43200227618217468262f};
static const float tensor_Gemm_2_weight[3][3] = 
{
  {-0.19914944469928741455f, 1.5182610750198364258f, 0.45674759149551391602f},
  {0.011302800849080085754f, 0.51783990859985351562f, -0.40940898656845092773f},
  {-0.51928770542144775391f, -2.3806872367858886719f, -0.31615826487541198730f}
};
static const float tensor_Gemm_2_bias[3] = 
{-2.3356688022613525391f, 0.80397957563400268555f, 2.2194695472717285156f};
float tensor_onnx__Gemm_7[1][4];
float tensor_onnx__Gemm_9[1][3];
float tensor_onnx__Gemm_11[1][3];

float tensor_input[1][3];
float tensor_input_3[1][3];


static inline void node_Flatten_0( const float tensor_onnx__Flatten_0[1][4], float tensor_onnx__Gemm_7[1][4] )
{
	/* Flatten*/
	float *input = (float*)tensor_onnx__Flatten_0;
	float *output = (float*)tensor_onnx__Gemm_7;
	for( uint32_t i=0; i<4; i++ )
		output[i] = input[i];

}

static inline void node_Gemm_1( const float tensor_onnx__Gemm_7[1][4], const float tensor_Gemm_0_weight[3][4], const float tensor_Gemm_0_bias[3], float tensor_input[1][3] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 4;
	const int N = 3;
	float (*A)[4]  = (float(*)[4])tensor_onnx__Gemm_7;
	float (*Y)[3]  = (float(*)[3])tensor_input;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[3]  = (float(*)[3])tensor_Gemm_0_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_0_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void node_Relu_2( const float tensor_input[1][3], float tensor_onnx__Gemm_9[1][3] )
{
	/*Relu*/
	float *X = (float*)tensor_input;
	float *Y = (float*)tensor_onnx__Gemm_9;
	for( uint32_t i=0; i<3; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void node_Gemm_3( const float tensor_onnx__Gemm_9[1][3], const float tensor_Gemm_1_weight[3][3], const float tensor_Gemm_1_bias[3], float tensor_input_3[1][3] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 3;
	const int N = 3;
	float (*A)[3]  = (float(*)[3])tensor_onnx__Gemm_9;
	float (*Y)[3]  = (float(*)[3])tensor_input_3;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[3]  = (float(*)[3])tensor_Gemm_1_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_1_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void node_Relu_4( const float tensor_input_3[1][3], float tensor_onnx__Gemm_11[1][3] )
{
	/*Relu*/
	float *X = (float*)tensor_input_3;
	float *Y = (float*)tensor_onnx__Gemm_11;
	for( uint32_t i=0; i<3; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void node_Gemm_5( const float tensor_onnx__Gemm_11[1][3], const float tensor_Gemm_2_weight[3][3], const float tensor_Gemm_2_bias[3], float tensor_12[1][3] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 3;
	const int N = 3;
	float (*A)[3]  = (float(*)[3])tensor_onnx__Gemm_11;
	float (*Y)[3]  = (float(*)[3])tensor_12;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[3]  = (float(*)[3])tensor_Gemm_2_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_2_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}


void original(const float tensor_onnx__Flatten_0[1][4], float tensor_12[1][3]) {
	node_Flatten_0( tensor_onnx__Flatten_0, tensor_onnx__Gemm_7);
	node_Gemm_1( tensor_onnx__Gemm_7, tensor_Gemm_0_weight, tensor_Gemm_0_bias, tensor_input);
	node_Relu_2( tensor_input, tensor_onnx__Gemm_9);
	node_Gemm_3( tensor_onnx__Gemm_9, tensor_Gemm_1_weight, tensor_Gemm_1_bias, tensor_input_3);
	node_Relu_4( tensor_input_3, tensor_onnx__Gemm_11);
	node_Gemm_5( tensor_onnx__Gemm_11, tensor_Gemm_2_weight, tensor_Gemm_2_bias, tensor_12);
}

#endif // ORIGINAL_H

