
#ifndef ORIGINAL_H
#define ORIGINAL_H
// This file is computer-generated by onnx2c 
// (TODO: add creating command line here)
// (TODO: print creation date here )

// ONNX model:
// produced by pytorch, version 1.11.0
// ONNX IR version: 9
// Model documentation: 
/*

*/

#include <float.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#define MAX(X,Y) ( X > Y ? X : Y)
#define MIN(X,Y) ( X < Y ? X : Y)
#define CLIP(X,L) ( MAX(MIN(X,L), -L) )

static const float tensor_Gemm_0_weight[10][64] = 
{
  {0.061353631317615509033f, 0.060995124280452728271f, -0.032861921936273574829f, 0.18050204217433929443f, 0.21660158038139343262f, 0.084967575967311859131f, -0.084417968988418579102f, -0.12348069250583648682f, 0.078910544514656066895f, -0.0052050696685910224915f, 0.11118821054697036743f, 0.62465333938598632812f, 0.70490878820419311523f, 0.24221804738044738770f, -0.0085971290245652198792f, -0.081301949918270111084f, -0.12101791054010391235f, -0.10657306015491485596f, -0.078709661960601806641f, 0.10334354639053344727f, -0.032614417374134063721f, -0.056084964424371719360f, 0.18010705709457397461f, 0.19231159985065460205f, -0.069614954292774200439f, -0.24676416814327239990f, -0.31033429503440856934f, 0.46178868412971496582f, -0.42678236961364746094f, -0.53660160303115844727f, 0.28417044878005981445f, 0.073515988886356353760f, -0.097651749849319458008f, -0.13640686869621276855f, 0.14387360215187072754f, 0.20349691808223724365f, -0.55114239454269409180f, -0.26537925004959106445f, 0.49010393023490905762f, 0.050099771469831466675f, 0.033833179622888565063f, 0.52566957473754882812f, 0.97853267192840576172f, 0.45202594995498657227f, 0.23209366202354431152f, 0.82781147956848144531f, 0.31334269046783447266f, 0.17129950225353240967f, 0.030611013993620872498f, 0.069914050400257110596f, 0.53466665744781494141f, 0.45453676581382751465f, 0.44088426232337951660f, 0.043331224471330642700f, 0.016898006200790405273f, -0.094249203801155090332f, -0.016136404126882553101f, 0.045744068920612335205f, -0.29554659128189086914f, -0.22919996082782745361f, -0.20078380405902862549f, -0.19478151202201843262f, -0.0060131619684398174286f, -0.078948527574539184570f},
  {-0.010562841780483722687f, -0.070008054375648498535f, -0.057561587542295455933f, -0.045291077345609664917f, -0.031522102653980255127f, -0.11693801730871200562f, -0.010234670713543891907f, 0.027428116649389266968f, -0.0086068119853734970093f, 0.026936346665024757385f, 0.092329606413841247559f, -0.0035790940746665000916f, 0.065911501646041870117f, -0.10833083838224411011f, -0.098770342767238616943f, 0.018517849966883659363f, -0.016604283824563026428f, 0.019518543034791946411f, -0.10549394786357879639f, 0.080632440745830535889f, -0.11354658007621765137f, 0.084229685366153717041f, 0.11096785217523574829f, -0.10401908308267593384f, -0.029085267335176467896f, 0.12068804353475570679f, -0.10657279938459396362f, 0.0036387694999575614929f, -0.14185026288032531738f, -0.034534908831119537354f, 0.062701202929019927979f, -0.11505549401044845581f, -0.0051616369746625423431f, 0.088523223996162414551f, 0.038233194500207901001f, -0.094088211655616760254f, -0.11216405779123306274f, 0.077659048140048980713f, 0.042575553059577941895f, 0.10809636861085891724f, 0.085524380207061767578f, 0.040662463754415512085f, -0.060926552861928939819f, 0.027929345145821571350f, -0.083329066634178161621f, 0.076840996742248535156f, 0.057667221873998641968f, -0.075923800468444824219f, -0.052879292517900466919f, -0.056882157921791076660f, -0.11959272623062133789f, -0.016314581036567687988f, 0.10617326200008392334f, -0.014773478731513023376f, 0.037694953382015228271f, -0.092410951852798461914f, -0.085156761109828948975f, 0.042852800339460372925f, 0.052925191819667816162f, 0.074950054287910461426f, 0.048325285315513610840f, 0.10409390181303024292f, -0.10931731015443801880f, 0.088645949959754943848f},
  {0.12052370607852935791f, 0.025694884359836578369f, -0.082617372274398803711f, -0.091222405433654785156f, 0.028534557670354843140f, 0.015172115527093410492f, 0.059859808534383773804f, 0.12285491079092025757f, 0.12358254194259643555f, -0.089500688016414642334f, -0.047826208174228668213f, -0.12689507007598876953f, 0.040292423218488693237f, 0.043549481779336929321f, 0.028345452621579170227f, 0.032765828073024749756f, -0.0097283860668540000916f, -0.049641873687505722046f, -0.025133285671472549438f, 0.068107560276985168457f, -0.12591625750064849854f, 0.018317315727472305298f, 0.099248498678207397461f, -0.11970623582601547241f, 0.038541812449693679810f, 0.070822104811668395996f, -0.12968204915523529053f, 0.062330886721611022949f, -0.070358522236347198486f, -0.019709037616848945618f, -0.016443809494376182556f, 0.084838189184665679932f, 0.079122118651866912842f, -0.083499558269977569580f, -0.10090205073356628418f, 0.061188057065010070801f, -0.13555376231670379639f, -0.028282241895794868469f, 0.10293108224868774414f, 0.078995771706104278564f, 0.067523181438446044922f, -0.10481815040111541748f, -0.051801577210426330566f, -0.044685926288366317749f, -0.091589473187923431396f, 0.041953615844249725342f, -0.066941775381565093994f, 0.035445801913738250732f, -0.0053645861335098743439f, 0.10494900494813919067f, 0.013070601038634777069f, -0.14595724642276763916f, 0.0093054240569472312927f, 0.10899291187524795532f, -0.024748235940933227539f, -0.022070001810789108276f, 0.081766948103904724121f, -0.017551958560943603516f, 0.049119882285594940186f, 0.086686968803405761719f, 0.058789752423763275146f, -0.021355926990509033203f, -0.067125633358955383301f, -0.084820747375488281250f},
  {0.0098288925364613533020f, 0.032485317438840866089f, 0.076233670115470886230f, 0.078018605709075927734f, 0.090882360935211181641f, -0.034746274352073669434f, -0.078361093997955322266f, -0.076687425374984741211f, -0.11516774445772171021f, 0.10333561152219772339f, 0.051268622279167175293f, 0.0057884412817656993866f, 0.065029591321945190430f, -0.0032915610354393720627f, 0.099358677864074707031f, 0.0024504817556589841843f, -0.039308421313762664795f, -0.051696505397558212280f, -0.11985064297914505005f, -0.092907406389713287354f, -0.073448337614536285400f, -0.12140955030918121338f, 0.068705551326274871826f, -0.026789665222167968750f, -0.10571870207786560059f, -0.067856505513191223145f, 0.11846995353698730469f, 0.016507681459188461304f, -0.059314198791980743408f, -0.088892668485641479492f, 0.077580913901329040527f, -0.10792352259159088135f, 0.055097471922636032104f, 0.11206949502229690552f, 0.097525328397750854492f, -0.038500133901834487915f, 0.091699741780757904053f, -0.11642157286405563354f, 0.10580423474311828613f, 0.089319564402103424072f, 0.021593699231743812561f, -0.017394160851836204529f, 0.10895266383886337280f, -0.018407428637146949768f, -0.0068265763111412525177f, -0.11534248292446136475f, 0.077231071889400482178f, 0.0087117385119199752808f, -0.041112307459115982056f, -0.10063476115465164185f, -0.0015709645813331007957f, -0.059629067778587341309f, 0.027959872037172317505f, -0.10222983360290527344f, -0.054343931376934051514f, -0.032307494431734085083f, -0.045499473810195922852f, 0.026710949838161468506f, 0.029722601175308227539f, 0.067874617874622344971f, 0.012800983153283596039f, -0.062374398112297058105f, -0.086185507476329803467f, -0.11629579961299896240f},
  {-0.11528594046831130981f, -0.099154748022556304932f, -0.0095450393855571746826f, -0.10570528358221054077f, 0.037240449339151382446f, -0.015267302282154560089f, -0.090515822172164916992f, 0.10846994817256927490f, -0.12275134772062301636f, 0.00020802482322324067354f, 0.074265383183956146240f, 0.032617796212434768677f, 0.0061208182014524936676f, -0.046367853879928588867f, -0.092108726501464843750f, -0.052180707454681396484f, -0.10373075306415557861f, 0.11227816343307495117f, -0.080990746617317199707f, -0.062328994274139404297f, 0.12197983264923095703f, 0.0016489488771185278893f, -0.030940959230065345764f, -0.083480283617973327637f, -0.0021753995679318904877f, 0.096066109836101531982f, 0.083382271230220794678f, -0.10506681352853775024f, -0.10715460777282714844f, 0.0039287940599024295807f, -0.030576007440686225891f, -0.045838929712772369385f, 0.017486730590462684631f, -0.048628833144903182983f, 0.063268199563026428223f, -0.10474105924367904663f, -0.028140274807810783386f, -0.11138848960399627686f, 0.016204124316573143005f, -0.038408804684877395630f, 0.074575603008270263672f, 0.050653912127017974854f, 0.00018589526007417589426f, -0.076620332896709442139f, 0.0018682905938476324081f, 0.079350121319293975830f, 0.10520713776350021362f, -0.089810915291309356689f, 0.030110467225313186646f, -0.097881115972995758057f, 0.0035801033955067396164f, -0.10962952673435211182f, -0.059011757373809814453f, -0.083686947822570800781f, 0.068642310798168182373f, 0.047950997948646545410f, -0.073679819703102111816f, -0.059806581586599349976f, 0.081366121768951416016f, 0.12503382563591003418f, -0.040621645748615264893f, -0.092357695102691650391f, 0.056607201695442199707f, -0.11668419837951660156f},
  {0.033753674477338790894f, -0.11969683319330215454f, -0.015003749169409275055f, -0.038423355668783187866f, -0.066871345043182373047f, 0.010555364191532135010f, -0.062008064240217208862f, -0.11374744027853012085f, 0.032681204378604888916f, -0.059804048389196395874f, 0.080853044986724853516f, -0.053870469331741333008f, -0.029760025441646575928f, 0.15055017173290252686f, 0.12887269258499145508f, 0.067065015435218811035f, -0.10231831669807434082f, 0.073838338255882263184f, 0.096341349184513092041f, 0.33801779150962829590f, 0.51718795299530029297f, 0.44925880432128906250f, 0.19404618442058563232f, 0.17295773327350616455f, -0.10800050199031829834f, 0.00045421015238389372826f, 0.30334720015525817871f, 0.47952565550804138184f, 0.20418076217174530029f, 0.0047763315960764884949f, 0.18604333698749542236f, -0.022184150293469429016f, -0.032327279448509216309f, -0.040589179843664169312f, -0.16606852412223815918f, -0.24647420644760131836f, -0.34116649627685546875f, 0.061690181493759155273f, 0.18975648283958435059f, -0.11869555711746215820f, 0.062786452472209930420f, -0.012767235748469829559f, -0.10619407147169113159f, -0.53845554590225219727f, -0.12079591304063796997f, 0.33546230196952819824f, -0.086157098412513732910f, -0.13554599881172180176f, 0.11901344358921051025f, 0.14228300750255584717f, 0.44342982769012451172f, 0.58900880813598632812f, 0.47513467073440551758f, 0.10982321202754974365f, -0.076606899499893188477f, 0.066910386085510253906f, 0.087224297225475311279f, 0.044423904269933700562f, -0.012510647065937519073f, 0.14675246179103851318f, 0.14847333729267120361f, 0.062471106648445129395f, 0.0036641720216721296310f, -0.078674361109733581543f},
  {-0.085838384926319122314f, -0.10159257054328918457f, -0.10075674206018447876f, -0.042427707463502883911f, -0.15114168822765350342f, -0.10149094462394714355f, 0.0068513043224811553955f, -0.0050827981904149055481f, -0.038946706801652908325f, 0.043511472642421722412f, 0.011038194410502910614f, -0.044403363019227981567f, -0.051184300333261489868f, -0.013374586589634418488f, 0.072018161416053771973f, 0.022378921508789062500f, -0.047395870089530944824f, 0.0069503514096140861511f, 0.14292922616004943848f, 0.072470769286155700684f, 0.17406176030635833740f, 0.34659260511398315430f, 0.036656878888607025146f, -0.088910132646560668945f, 0.021767392754554748535f, 0.13231270015239715576f, 0.29903703927993774414f, -0.16655404865741729736f, 0.86651927232742309570f, 0.44337430596351623535f, -0.22533115744590759277f, -0.079421997070312500000f, -0.091367408633232116699f, 0.042807362973690032959f, -0.19711600244045257568f, 0.34579303860664367676f, 0.89697092771530151367f, 0.086629927158355712891f, -0.28663122653961181641f, -0.0073441662825644016266f, -0.017635995522141456604f, -0.18008482456207275391f, -0.30696192383766174316f, 0.079242244362831115723f, 0.11404417455196380615f, -0.35176301002502441406f, -0.22419132292270660400f, 0.079392842948436737061f, -0.081789799034595489502f, 0.0073257661424577236176f, -0.049777548760175704956f, -0.026889311149716377258f, 0.12880814075469970703f, 0.16702364385128021240f, -0.023084508255124092102f, 0.031294547021389007568f, -0.0064759720116853713989f, -0.098602406680583953857f, 0.083435036242008209229f, 0.18870060145854949951f, 0.064732037484645843506f, 0.16453015804290771484f, 0.11235254257917404175f, -0.054906159639358520508f},
  {-0.021759543567895889282f, 0.041109740734100341797f, 0.089128613471984863281f, 0.10117787122726440430f, -0.095172896981239318848f, -0.12585997581481933594f, -0.041069220751523971558f, 0.10338450968265533447f, 0.012492816895246505737f, 0.10697963833808898926f, 0.0093577206134796142578f, 0.11713232845067977905f, 0.14187316596508026123f, 0.12341156601905822754f, -0.081565059721469879150f, -0.033261742442846298218f, 0.082304008305072784424f, -0.051137268543243408203f, 0.10322582721710205078f, -0.013616706244647502899f, 0.071669235825538635254f, 0.20521895587444305420f, 0.18826796114444732666f, 0.11086579412221908569f, -0.12663890421390533447f, -0.13270157575607299805f, 0.090049296617507934570f, 0.15679867565631866455f, -0.16000410914421081543f, -0.10219088196754455566f, 0.23418660461902618408f, -0.061985313892364501953f, -0.027939781546592712402f, -0.086513519287109375000f, 0.081798702478408813477f, -0.12276017665863037109f, -0.29309919476509094238f, -0.16143777966499328613f, 0.11814653873443603516f, -0.047707036137580871582f, 0.081734746694564819336f, 0.031725749373435974121f, 0.14666755497455596924f, 0.079843387007713317871f, 0.080389559268951416016f, -0.038986705243587493896f, -0.034484669566154479980f, 0.10462582111358642578f, -0.035994809120893478394f, -0.019663898274302482605f, 0.24639435112476348877f, 0.17580571770668029785f, 0.21757154166698455811f, 0.14687742292881011963f, -0.018317379057407379150f, 0.040520649403333663940f, -0.045370500534772872925f, -0.12824115157127380371f, -0.033648949116468429565f, 0.095075495541095733643f, -0.016987476497888565063f, 0.047666434198617935181f, -0.0035814680159091949463f, -0.023167241364717483521f},
  {-0.030545562505722045898f, 0.018250375986099243164f, -0.022643284872174263000f, -0.023941041901707649231f, 0.097235143184661865234f, 0.12266521155834197998f, -0.062302421778440475464f, 0.065022915601730346680f, 0.027675824239850044250f, -0.12342045456171035767f, -0.10167632251977920532f, -0.021163092926144599915f, -0.071536839008331298828f, -0.090809673070907592773f, 0.061927605420351028442f, 0.0030536695849150419235f, 0.023230595514178276062f, 0.020945610478520393372f, 0.086385637521743774414f, 0.091049149632453918457f, -0.10556299984455108643f, -0.063942193984985351562f, 0.013287616893649101257f, 0.0017455944325774908066f, -0.00082147470675408840179f, -0.10777640342712402344f, -0.0099173327907919883728f, 0.064346306025981903076f, -0.094871237874031066895f, 0.084146663546562194824f, -0.020313680171966552734f, 0.029693095013499259949f, -0.030474714934825897217f, -0.045010201632976531982f, -0.082172058522701263428f, 0.11165272444486618042f, -0.10167663544416427612f, 0.071665681898593902588f, -0.017054291442036628723f, -0.12117228657007217407f, 0.076945230364799499512f, 0.021515626460313796997f, 0.029533149674534797668f, -0.044550511986017227173f, 0.010217386297881603241f, -0.11644236743450164795f, 0.046343728899955749512f, 0.082613416016101837158f, -0.0085821589455008506775f, -0.056824047118425369263f, -0.036614201962947845459f, -0.096572786569595336914f, 0.10929559171199798584f, 0.049874551594257354736f, 0.046637110412120819092f, -0.044086549431085586548f, -0.017882347106933593750f, -0.087674245238304138184f, -0.049624212086200714111f, -0.041370529681444168091f, -0.086645968258380889893f, 0.0049787694588303565979f, 0.094046652317047119141f, 0.057744394987821578979f},
  {-0.11030098050832748413f, 0.12400969862937927246f, -0.094767756760120391846f, 0.015988456085324287415f, 0.16428254544734954834f, 0.091674081981182098389f, 0.028004707768559455872f, -0.063258625566959381104f, -0.11137332767248153687f, -0.10264828056097030640f, 0.16323457658290863037f, 0.20656058192253112793f, 0.35608851909637451172f, 0.22906838357448577881f, 0.027690164744853973389f, 0.046558171510696411133f, -0.077179946005344390869f, -0.030278278514742851257f, -0.14881990849971771240f, -0.38956093788146972656f, -0.33044257760047912598f, -0.028447184711694717407f, -0.18214537203311920166f, -0.0058975913561880588531f, -0.024043314158916473389f, -0.12987112998962402344f, -0.30117774009704589844f, -0.46369218826293945312f, 0.073925219476222991943f, 0.041266493499279022217f, -0.11325123906135559082f, -0.0035895560868084430695f, -0.11287789046764373779f, 0.044933818280696868896f, 0.20673349499702453613f, 0.71766328811645507812f, 0.56328779458999633789f, -0.16647604107856750488f, 0.026030337437987327576f, 0.010324063710868358612f, 0.11197394132614135742f, 0.0021452512592077255249f, 0.56395655870437622070f, 0.84927254915237426758f, 0.31728950142860412598f, 0.071690090000629425049f, 0.37429642677307128906f, 0.19652099907398223877f, -0.11686640977859497070f, -0.043670400977134704590f, -0.038973771035671234131f, -0.35304969549179077148f, -0.017549037933349609375f, 0.25361028313636779785f, 0.096342340111732482910f, 0.031095340847969055176f, 0.094753898680210113525f, -0.071907214820384979248f, -0.28731334209442138672f, -0.18483963608741760254f, -0.048253461718559265137f, 0.030375279486179351807f, -0.10970205068588256836f, 0.068729385733604431152f}
};
static const float tensor_Gemm_0_bias[10] = 
{0.19916836917400360107f, 0.046104073524475097656f, 0.053319968283176422119f, -0.11545117944478988647f, 0.013168622739613056183f, 0.25909489393234252930f, 0.56105017662048339844f, -0.058628775179386138916f, -0.084735326468944549561f, 0.30487039685249328613f};
static const float tensor_Gemm_1_weight[10][10] = 
{
  {0.75061184167861938477f, 0.096785254776477813721f, 0.042417574673891067505f, 0.093377470970153808594f, -0.037822984158992767334f, -0.46906745433807373047f, 0.35400959849357604980f, 0.15239816904067993164f, 0.025148276239633560181f, 1.1413167715072631836f},
  {0.12093107402324676514f, 0.25273895263671875000f, -0.18811587989330291748f, -0.24564440548419952393f, 0.29206556081771850586f, 0.14134740829467773438f, -0.27762955427169799805f, 0.0059164594858884811401f, -0.26356753706932067871f, 0.31020638346672058105f},
  {1.2465754747390747070f, 0.19799444079399108887f, 0.013346946798264980316f, -0.12502536177635192871f, 0.12340664863586425781f, 0.84864974021911621094f, -0.37624287605285644531f, 0.52838319540023803711f, 0.14811928570270538330f, -0.14707006514072418213f},
  {0.015471494756639003754f, 0.20173627138137817383f, -0.23968289792537689209f, -0.14279995858669281006f, -0.026846650987863540649f, -0.096283473074436187744f, -0.045159917324781417847f, 0.026159202679991722107f, -0.29022714495658874512f, -0.25591072440147399902f},
  {1.6028267145156860352f, -0.27077797055244445801f, -0.18238598108291625977f, -0.069322064518928527832f, -0.0011031008325517177582f, 0.47462594509124755859f, -0.65455853939056396484f, 0.046322751790285110474f, 0.12578997015953063965f, 0.14590372145175933838f},
  {-0.20134298503398895264f, -0.11015219241380691528f, -0.085772827267646789551f, -0.060459285974502563477f, -0.10615940392017364502f, -0.12438514083623886108f, -0.0092468056827783584595f, 0.14173807203769683838f, -0.0030250942800194025040f, -0.19207929074764251709f},
  {-0.71751147508621215820f, 0.17252111434936523438f, -0.061632551252841949463f, 0.31337758898735046387f, 0.28165873885154724121f, 0.94414323568344116211f, 1.4589673280715942383f, -0.27753615379333496094f, 0.11618756502866744995f, -0.46975982189178466797f},
  {-0.027679789811372756958f, 0.083787329494953155518f, 0.23337562382221221924f, 0.13597233593463897705f, 0.068554610013961791992f, -0.79785627126693725586f, 0.52748906612396240234f, -0.34520208835601806641f, 0.0035362842027097940445f, 1.3701957464218139648f},
  {0.92033088207244873047f, 0.15710392594337463379f, -0.30364888906478881836f, 0.0055379923433065414429f, 0.31032916903495788574f, 0.17533873021602630615f, -0.34967747330665588379f, 0.31396362185478210449f, 0.18201766908168792725f, 0.31072065234184265137f},
  {0.15935291349887847900f, -0.017764016985893249512f, 0.15790846943855285645f, -0.065242163836956024170f, 0.28718316555023193359f, -0.17768639326095581055f, -0.27974629402160644531f, -0.23690603673458099365f, -0.19589036703109741211f, -0.14201159775257110596f}
};
static const float tensor_Gemm_1_bias[10] = 
{-0.21409763395786285400f, -0.19763389229774475098f, -0.12917442619800567627f, -0.18224512040615081787f, 0.51988309621810913086f, -0.15561085939407348633f, 0.94810563325881958008f, 0.47343575954437255859f, -0.054976869374513626099f, -0.29781609773635864258f};
static const float tensor_Gemm_2_weight[10][10] = 
{
  {-0.35599943995475769043f, -0.032355081290006637573f, 1.0184141397476196289f, -0.21765071153640747070f, 0.56770247220993041992f, 0.23398807644844055176f, -0.83821415901184082031f, -0.86762547492980957031f, 0.57892197370529174805f, 0.057001236826181411743f},
  {0.20018599927425384521f, 0.22852045297622680664f, -0.57956361770629882812f, 0.22058628499507904053f, -0.48742553591728210449f, 0.059471767395734786987f, 0.29277011752128601074f, 0.69340854883193969727f, -0.26846820116043090820f, 0.070307321846485137939f},
  {0.65026360750198364258f, 0.074786767363548278809f, 0.11878750473260879517f, 0.028847999870777130127f, -0.021178325638175010681f, 0.23096188902854919434f, -0.94087076187133789062f, 0.75266718864440917969f, 0.46577635407447814941f, 0.27360275387763977051f},
  {-0.17020453512668609619f, 0.0088587105274200439453f, 0.21798227727413177490f, -0.027044259011745452881f, 0.43833094835281372070f, 0.24830362200736999512f, 0.40223956108093261719f, -0.59186601638793945312f, 0.11671913415193557739f, -0.018782183527946472168f},
  {-0.033611655235290527344f, -0.13394057750701904297f, -0.58563381433486938477f, -0.13778240978717803955f, -0.79531717300415039062f, 0.010693023912608623505f, 0.49981975555419921875f, 0.79480677843093872070f, -0.37196555733680725098f, -0.21237730979919433594f},
  {-0.44599875807762145996f, -0.16972813010215759277f, 0.45303037762641906738f, -0.18612590432167053223f, 0.45316427946090698242f, 0.025493355467915534973f, 0.20303454995155334473f, -0.53794270753860473633f, 0.13277390599250793457f, 0.00090959784574806690216f},
  {0.44360330700874328613f, -0.018450506031513214111f, -0.17440567910671234131f, -0.20096653699874877930f, 0.60980355739593505859f, -0.13830308616161346436f, -0.78389477729797363281f, 0.42741322517395019531f, 0.27351331710815429688f, -0.25520017743110656738f},
  {-0.90350919961929321289f, 0.30019277334213256836f, -0.39106547832489013672f, -0.066881775856018066406f, -0.87829238176345825195f, -0.016312859952449798584f, 1.0470049381256103516f, -0.16774162650108337402f, -0.51243716478347778320f, -0.095136187970638275146f},
  {0.38960975408554077148f, -0.19074200093746185303f, 0.34085685014724731445f, 0.13371141254901885986f, -0.12314192950725555420f, 0.20339235663414001465f, 0.22310674190521240234f, -0.053911566734313964844f, 0.15879879891872406006f, -0.30016973614692687988f},
  {-0.43702504038810729980f, 0.14037072658538818359f, -0.63002777099609375000f, -0.22777654230594635010f, -0.95807862281799316406f, 0.19919227063655853271f, 0.94260668754577636719f, 0.20767043530941009521f, -0.025765733793377876282f, -0.30824857950210571289f}
};
static const float tensor_Gemm_2_bias[10] = 
{-0.59997576475143432617f, 0.46911901235580444336f, -0.33731007575988769531f, -0.049416065216064453125f, 0.19680450856685638428f, 0.15072631835937500000f, -0.024960368871688842773f, 0.40187343955039978027f, -0.079555846750736236572f, 0.17887309193611145020f};
float tensor_onnx__Gemm_7[1][64];
float tensor_onnx__Gemm_9[1][10];
float tensor_onnx__Gemm_11[1][10];

float tensor_input[1][10];
float tensor_input_3[1][10];


static inline void node_Flatten_0( const float tensor_onnx__Flatten_0[1][64], float tensor_onnx__Gemm_7[1][64] )
{
	/* Flatten*/
	float *input = (float*)tensor_onnx__Flatten_0;
	float *output = (float*)tensor_onnx__Gemm_7;
	for( uint32_t i=0; i<64; i++ )
		output[i] = input[i];

}

static inline void node_Gemm_1( const float tensor_onnx__Gemm_7[1][64], const float tensor_Gemm_0_weight[10][64], const float tensor_Gemm_0_bias[10], float tensor_input[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 64;
	const int N = 10;
	float (*A)[64]  = (float(*)[64])tensor_onnx__Gemm_7;
	float (*Y)[10]  = (float(*)[10])tensor_input;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])tensor_Gemm_0_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_0_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void node_Relu_2( const float tensor_input[1][10], float tensor_onnx__Gemm_9[1][10] )
{
	/*Relu*/
	float *X = (float*)tensor_input;
	float *Y = (float*)tensor_onnx__Gemm_9;
	for( uint32_t i=0; i<10; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void node_Gemm_3( const float tensor_onnx__Gemm_9[1][10], const float tensor_Gemm_1_weight[10][10], const float tensor_Gemm_1_bias[10], float tensor_input_3[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 10;
	const int N = 10;
	float (*A)[10]  = (float(*)[10])tensor_onnx__Gemm_9;
	float (*Y)[10]  = (float(*)[10])tensor_input_3;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])tensor_Gemm_1_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_1_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void node_Relu_4( const float tensor_input_3[1][10], float tensor_onnx__Gemm_11[1][10] )
{
	/*Relu*/
	float *X = (float*)tensor_input_3;
	float *Y = (float*)tensor_onnx__Gemm_11;
	for( uint32_t i=0; i<10; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void node_Gemm_5( const float tensor_onnx__Gemm_11[1][10], const float tensor_Gemm_2_weight[10][10], const float tensor_Gemm_2_bias[10], float tensor_12[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 10;
	const int N = 10;
	float (*A)[10]  = (float(*)[10])tensor_onnx__Gemm_11;
	float (*Y)[10]  = (float(*)[10])tensor_12;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])tensor_Gemm_2_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_2_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}


void original(const float tensor_onnx__Flatten_0[1][64], float tensor_12[1][10]) {
	node_Flatten_0( tensor_onnx__Flatten_0, tensor_onnx__Gemm_7);
	node_Gemm_1( tensor_onnx__Gemm_7, tensor_Gemm_0_weight, tensor_Gemm_0_bias, tensor_input);
	node_Relu_2( tensor_input, tensor_onnx__Gemm_9);
	node_Gemm_3( tensor_onnx__Gemm_9, tensor_Gemm_1_weight, tensor_Gemm_1_bias, tensor_input_3);
	node_Relu_4( tensor_input_3, tensor_onnx__Gemm_11);
	node_Gemm_5( tensor_onnx__Gemm_11, tensor_Gemm_2_weight, tensor_Gemm_2_bias, tensor_12);
}

#endif // ORIGINAL_H

