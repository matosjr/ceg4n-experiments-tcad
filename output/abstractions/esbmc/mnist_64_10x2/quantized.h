
#ifndef QUANTIZED_H
#define QUANTIZED_H
// This file is computer-generated by onnx2c 
// (TODO: add creating command line here)
// (TODO: print creation date here )

// ONNX model:
// produced by pytorch, version 1.11.0
// ONNX IR version: 9
// Model documentation: 
/*

*/

#include <float.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#define MAX(X,Y) ( X > Y ? X : Y)
#define MIN(X,Y) ( X < Y ? X : Y)
#define CLIP(X,L) ( MAX(MIN(X,L), -L) )

static const float quantized_tensor_Gemm_0_weight[10][64] = 
{
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.26094204187393188477f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.65235507488250732422f, 0.65235507488250732422f, 0.26094204187393188477f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.26094204187393188477f, -0.26094204187393188477f, 0.52188408374786376953f, -0.39141306281089782715f, -0.52188408374786376953f, 0.26094204187393188477f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.26094204187393188477f, -0.52188408374786376953f, -0.26094204187393188477f, 0.52188408374786376953f, 0.0000000000000000000f, 0.0000000000000000000f, 0.52188408374786376953f, 0.91329717636108398438f, 0.39141306281089782715f, 0.26094204187393188477f, 0.78282612562179565430f, 0.26094204187393188477f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.52188408374786376953f, 0.39141306281089782715f, 0.39141306281089782715f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.26094204187393188477f, -0.26094204187393188477f, -0.26094204187393188477f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f},
  {0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f},
  {0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f},
  {-0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f},
  {0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.39141306281089782715f, 0.52188408374786376953f, 0.39141306281089782715f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.26094204187393188477f, 0.52188408374786376953f, 0.26094204187393188477f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.26094204187393188477f, -0.39141306281089782715f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.52188408374786376953f, -0.13047102093696594238f, 0.39141306281089782715f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.39141306281089782715f, 0.65235507488250732422f, 0.52188408374786376953f, 0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f},
  {-0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.39141306281089782715f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.26094204187393188477f, -0.13047102093696594238f, 0.91329717636108398438f, 0.39141306281089782715f, -0.26094204187393188477f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.26094204187393188477f, 0.39141306281089782715f, 0.91329717636108398438f, 0.13047102093696594238f, -0.26094204187393188477f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.26094204187393188477f, 0.13047102093696594238f, 0.13047102093696594238f, -0.39141306281089782715f, -0.26094204187393188477f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.26094204187393188477f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.13047102093696594238f, 0.26094204187393188477f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, -0.26094204187393188477f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.26094204187393188477f, 0.13047102093696594238f, 0.26094204187393188477f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f},
  {-0.13047102093696594238f, 0.13047102093696594238f, -0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, 0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.13047102093696594238f, 0.13047102093696594238f, 0.26094204187393188477f, 0.39141306281089782715f, 0.26094204187393188477f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, -0.39141306281089782715f, -0.39141306281089782715f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, -0.26094204187393188477f, -0.52188408374786376953f, 0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.26094204187393188477f, 0.78282612562179565430f, 0.52188408374786376953f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, 0.13047102093696594238f, 0.0000000000000000000f, 0.52188408374786376953f, 0.91329717636108398438f, 0.26094204187393188477f, 0.13047102093696594238f, 0.39141306281089782715f, 0.26094204187393188477f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.39141306281089782715f, 0.0000000000000000000f, 0.26094204187393188477f, 0.13047102093696594238f, 0.0000000000000000000f, 0.13047102093696594238f, -0.13047102093696594238f, -0.26094204187393188477f, -0.13047102093696594238f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.13047102093696594238f}
};
static const float quantized_tensor_Gemm_0_bias[10] = 
{0.26094204187393188477f, 0.0000000000000000000f, 0.0000000000000000000f, -0.13047102093696594238f, 0.0000000000000000000f, 0.26094204187393188477f, 0.52188408374786376953f, 0.0000000000000000000f, -0.13047102093696594238f, 0.26094204187393188477f};
static const float quantized_tensor_Gemm_1_weight[10][10] = 
{
  {0.76325076818466186523f, 0.10176677256822586060f, 0.050883386284112930298f, 0.10176677256822586060f, -0.050883386284112930298f, -0.45795047283172607422f, 0.35618370771408081055f, 0.15265016257762908936f, 0.0000000000000000000f, 1.1194344758987426758f},
  {0.10176677256822586060f, 0.25441694259643554688f, -0.20353354513645172119f, -0.25441694259643554688f, 0.30530032515525817871f, 0.15265016257762908936f, -0.25441694259643554688f, 0.0000000000000000000f, -0.25441694259643554688f, 0.30530032515525817871f},
  {1.2212013006210327148f, 0.20353354513645172119f, 0.0000000000000000000f, -0.10176677256822586060f, 0.10176677256822586060f, 0.86501759290695190430f, -0.35618370771408081055f, 0.50883388519287109375f, 0.15265016257762908936f, -0.15265016257762908936f},
  {0.0000000000000000000f, 0.20353354513645172119f, -0.25441694259643554688f, -0.15265016257762908936f, -0.050883386284112930298f, -0.10176677256822586060f, -0.050883386284112930298f, 0.050883386284112930298f, -0.30530032515525817871f, -0.25441694259643554688f},
  {1.5773849487304687500f, -0.25441694259643554688f, -0.20353354513645172119f, -0.050883386284112930298f, 0.0000000000000000000f, 0.45795047283172607422f, -0.66148400306701660156f, 0.050883386284112930298f, 0.10176677256822586060f, 0.15265016257762908936f},
  {-0.20353354513645172119f, -0.10176677256822586060f, -0.10176677256822586060f, -0.050883386284112930298f, -0.10176677256822586060f, -0.10176677256822586060f, 0.0000000000000000000f, 0.15265016257762908936f, 0.0000000000000000000f, -0.20353354513645172119f},
  {-0.71236741542816162109f, 0.15265016257762908936f, -0.050883386284112930298f, 0.30530032515525817871f, 0.30530032515525817871f, 0.96678435802459716797f, 1.4756182432174682617f, -0.25441694259643554688f, 0.10176677256822586060f, -0.45795047283172607422f},
  {-0.050883386284112930298f, 0.10176677256822586060f, 0.25441694259643554688f, 0.15265016257762908936f, 0.050883386284112930298f, -0.81413418054580688477f, 0.50883388519287109375f, -0.35618370771408081055f, 0.0000000000000000000f, 1.3738514184951782227f},
  {0.91590094566345214844f, 0.15265016257762908936f, -0.30530032515525817871f, 0.0000000000000000000f, 0.30530032515525817871f, 0.15265016257762908936f, -0.35618370771408081055f, 0.30530032515525817871f, 0.20353354513645172119f, 0.30530032515525817871f},
  {0.15265016257762908936f, 0.0000000000000000000f, 0.15265016257762908936f, -0.050883386284112930298f, 0.30530032515525817871f, -0.15265016257762908936f, -0.25441694259643554688f, -0.25441694259643554688f, -0.20353354513645172119f, -0.15265016257762908936f}
};
static const float quantized_tensor_Gemm_1_bias[10] = 
{-0.20353354513645172119f, -0.20353354513645172119f, -0.15265016257762908936f, -0.20353354513645172119f, 0.50883388519287109375f, -0.15265016257762908936f, 0.96678435802459716797f, 0.45795047283172607422f, -0.050883386284112930298f, -0.30530032515525817871f};
static const float quantized_tensor_Gemm_2_weight[10][10] = 
{
  {-0.36562076210975646973f, -0.033238250762224197388f, 1.0303857326507568359f, -0.23266775906085968018f, 0.56505024433135986328f, 0.23266775906085968018f, -0.83095628023147583008f, -0.86419451236724853516f, 0.56505024433135986328f, 0.066476501524448394775f},
  {0.19942951202392578125f, 0.23266775906085968018f, -0.56505024433135986328f, 0.23266775906085968018f, -0.49857375025749206543f, 0.066476501524448394775f, 0.29914426803588867188f, 0.69800329208374023438f, -0.26590600609779357910f, 0.066476501524448394775f},
  {0.66476500034332275391f, 0.066476501524448394775f, 0.13295300304889678955f, 0.033238250762224197388f, -0.033238250762224197388f, 0.23266775906085968018f, -0.93067103624343872070f, 0.76447975635528564453f, 0.46533551812171936035f, 0.26590600609779357910f},
  {-0.16619125008583068848f, 0.0000000000000000000f, 0.23266775906085968018f, -0.033238250762224197388f, 0.43209725618362426758f, 0.23266775906085968018f, 0.39885902404785156250f, -0.59828853607177734375f, 0.13295300304889678955f, -0.033238250762224197388f},
  {-0.033238250762224197388f, -0.13295300304889678955f, -0.59828853607177734375f, -0.13295300304889678955f, -0.79771804809570312500f, 0.0000000000000000000f, 0.49857375025749206543f, 0.79771804809570312500f, -0.36562076210975646973f, -0.19942951202392578125f},
  {-0.43209725618362426758f, -0.16619125008583068848f, 0.46533551812171936035f, -0.19942951202392578125f, 0.46533551812171936035f, 0.033238250762224197388f, 0.19942951202392578125f, -0.53181201219558715820f, 0.13295300304889678955f, 0.0000000000000000000f},
  {0.43209725618362426758f, -0.033238250762224197388f, -0.16619125008583068848f, -0.19942951202392578125f, 0.59828853607177734375f, -0.13295300304889678955f, -0.79771804809570312500f, 0.43209725618362426758f, 0.26590600609779357910f, -0.26590600609779357910f},
  {-0.89743274450302124023f, 0.29914426803588867188f, -0.39885902404785156250f, -0.066476501524448394775f, -0.86419451236724853516f, 0.0000000000000000000f, 1.0303857326507568359f, -0.16619125008583068848f, -0.49857375025749206543f, -0.099714756011962890625f},
  {0.39885902404785156250f, -0.19942951202392578125f, 0.33238250017166137695f, 0.13295300304889678955f, -0.13295300304889678955f, 0.19942951202392578125f, 0.23266775906085968018f, -0.066476501524448394775f, 0.16619125008583068848f, -0.29914426803588867188f},
  {-0.43209725618362426758f, 0.13295300304889678955f, -0.63152676820755004883f, -0.23266775906085968018f, -0.96390926837921142578f, 0.19942951202392578125f, 0.93067103624343872070f, 0.19942951202392578125f, -0.033238250762224197388f, -0.29914426803588867188f}
};
static const float quantized_tensor_Gemm_2_bias[10] = 
{-0.59828853607177734375f, 0.46533551812171936035f, -0.33238250017166137695f, -0.033238250762224197388f, 0.19942951202392578125f, 0.16619125008583068848f, -0.033238250762224197388f, 0.39885902404785156250f, -0.066476501524448394775f, 0.16619125008583068848f};
float quantized_tensor_onnx__Gemm_7[1][64];
float quantized_tensor_onnx__Gemm_9[1][10];
float quantized_tensor_onnx__Gemm_11[1][10];

float quantized_tensor_input[1][10];
float quantized_tensor_input_3[1][10];


static inline void quantized_node_Flatten_0( const float quantized_tensor_onnx__Flatten_0[1][64], float quantized_tensor_onnx__Gemm_7[1][64] )
{
	/* Flatten*/
	float *input = (float*)quantized_tensor_onnx__Flatten_0;
	float *output = (float*)quantized_tensor_onnx__Gemm_7;
	for( uint32_t i=0; i<64; i++ )
		output[i] = input[i];

}

static inline void quantized_node_Gemm_1( const float quantized_tensor_onnx__Gemm_7[1][64], const float quantized_tensor_Gemm_0_weight[10][64], const float quantized_tensor_Gemm_0_bias[10], float quantized_tensor_input[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 64;
	const int N = 10;
	float (*A)[64]  = (float(*)[64])quantized_tensor_onnx__Gemm_7;
	float (*Y)[10]  = (float(*)[10])quantized_tensor_input;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])quantized_tensor_Gemm_0_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = quantized_tensor_Gemm_0_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void quantized_node_Relu_2( const float quantized_tensor_input[1][10], float quantized_tensor_onnx__Gemm_9[1][10] )
{
	/*Relu*/
	float *X = (float*)quantized_tensor_input;
	float *Y = (float*)quantized_tensor_onnx__Gemm_9;
	for( uint32_t i=0; i<10; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void quantized_node_Gemm_3( const float quantized_tensor_onnx__Gemm_9[1][10], const float quantized_tensor_Gemm_1_weight[10][10], const float quantized_tensor_Gemm_1_bias[10], float quantized_tensor_input_3[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 10;
	const int N = 10;
	float (*A)[10]  = (float(*)[10])quantized_tensor_onnx__Gemm_9;
	float (*Y)[10]  = (float(*)[10])quantized_tensor_input_3;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])quantized_tensor_Gemm_1_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = quantized_tensor_Gemm_1_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void quantized_node_Relu_4( const float quantized_tensor_input_3[1][10], float quantized_tensor_onnx__Gemm_11[1][10] )
{
	/*Relu*/
	float *X = (float*)quantized_tensor_input_3;
	float *Y = (float*)quantized_tensor_onnx__Gemm_11;
	for( uint32_t i=0; i<10; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void quantized_node_Gemm_5( const float quantized_tensor_onnx__Gemm_11[1][10], const float quantized_tensor_Gemm_2_weight[10][10], const float quantized_tensor_Gemm_2_bias[10], float quantized_tensor_12[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 10;
	const int N = 10;
	float (*A)[10]  = (float(*)[10])quantized_tensor_onnx__Gemm_11;
	float (*Y)[10]  = (float(*)[10])quantized_tensor_12;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])quantized_tensor_Gemm_2_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = quantized_tensor_Gemm_2_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}


void quantized(const float quantized_tensor_onnx__Flatten_0[1][64], float quantized_tensor_12[1][10]) {
	quantized_node_Flatten_0( quantized_tensor_onnx__Flatten_0, quantized_tensor_onnx__Gemm_7);
	quantized_node_Gemm_1( quantized_tensor_onnx__Gemm_7, quantized_tensor_Gemm_0_weight, quantized_tensor_Gemm_0_bias, quantized_tensor_input);
	quantized_node_Relu_2( quantized_tensor_input, quantized_tensor_onnx__Gemm_9);
	quantized_node_Gemm_3( quantized_tensor_onnx__Gemm_9, quantized_tensor_Gemm_1_weight, quantized_tensor_Gemm_1_bias, quantized_tensor_input_3);
	quantized_node_Relu_4( quantized_tensor_input_3, quantized_tensor_onnx__Gemm_11);
	quantized_node_Gemm_5( quantized_tensor_onnx__Gemm_11, quantized_tensor_Gemm_2_weight, quantized_tensor_Gemm_2_bias, quantized_tensor_12);
}

#endif // QUANTIZED_H

