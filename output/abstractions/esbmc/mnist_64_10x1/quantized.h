
#ifndef QUANTIZED_H
#define QUANTIZED_H
// This file is computer-generated by onnx2c 
// (TODO: add creating command line here)
// (TODO: print creation date here )

// ONNX model:
// produced by pytorch, version 1.11.0
// ONNX IR version: 9
// Model documentation: 
/*

*/

#include <float.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#define MAX(X,Y) ( X > Y ? X : Y)
#define MIN(X,Y) ( X < Y ? X : Y)
#define CLIP(X,L) ( MAX(MIN(X,L), -L) )

static const float quantized_tensor_Gemm_0_weight[10][64] = 
{
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.77299010753631591797f, 0.57974255084991455078f, 0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.57974255084991455078f, -0.77299010753631591797f, -0.19324752688407897949f, 0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.57974255084991455078f, 0.77299010753631591797f, 0.57974255084991455078f, 0.19324752688407897949f, 0.38649505376815795898f, 0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.57974255084991455078f, 0.96623766422271728516f, 1.1594851016998291016f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, -0.77299010753631591797f, 0.19324752688407897949f, 0.19324752688407897949f, -0.57974255084991455078f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.38649505376815795898f, 0.0000000000000000000f, -0.57974255084991455078f, 0.0000000000000000000f, 0.38649505376815795898f, 0.19324752688407897949f, 0.19324752688407897949f, 0.38649505376815795898f, 0.57974255084991455078f, 0.38649505376815795898f, 0.0000000000000000000f, 0.96623766422271728516f, 0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, 0.57974255084991455078f, 0.57974255084991455078f, 0.57974255084991455078f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f},
  {0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, -0.38649505376815795898f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.57974255084991455078f, 0.77299010753631591797f, 0.57974255084991455078f, 0.77299010753631591797f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.38649505376815795898f, 0.38649505376815795898f, -0.19324752688407897949f, -0.19324752688407897949f, 0.77299010753631591797f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.77299010753631591797f, -0.19324752688407897949f, 0.57974255084991455078f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.57974255084991455078f, 0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.38649505376815795898f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.19324752688407897949f, -0.57974255084991455078f, -0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.96623766422271728516f, 0.38649505376815795898f, -1.1594851016998291016f, -0.19324752688407897949f, 0.57974255084991455078f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, 1.3527326583862304688f, 0.19324752688407897949f, -0.19324752688407897949f, 0.38649505376815795898f, 0.77299010753631591797f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.96623766422271728516f, 0.77299010753631591797f, 0.57974255084991455078f, 0.57974255084991455078f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f},
  {-0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f},
  {0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.38649505376815795898f, 0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.38649505376815795898f, 0.19324752688407897949f, 0.57974255084991455078f, 0.57974255084991455078f, 0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, 0.38649505376815795898f, 0.77299010753631591797f, -0.19324752688407897949f, -0.38649505376815795898f, 0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.38649505376815795898f, -0.77299010753631591797f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.38649505376815795898f, -0.57974255084991455078f, -0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.96623766422271728516f, 0.77299010753631591797f, 0.57974255084991455078f, 0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, 0.19324752688407897949f, -0.57974255084991455078f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, 0.38649505376815795898f, -0.19324752688407897949f, 0.38649505376815795898f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.77299010753631591797f, 0.57974255084991455078f, 0.19324752688407897949f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.19324752688407897949f, 0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f},
  {-0.19324752688407897949f, 0.19324752688407897949f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.57974255084991455078f, 0.38649505376815795898f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.38649505376815795898f, -0.77299010753631591797f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, 0.0000000000000000000f, -0.19324752688407897949f, 0.19324752688407897949f, -0.38649505376815795898f, -0.19324752688407897949f, 0.0000000000000000000f, -0.57974255084991455078f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.38649505376815795898f, 0.77299010753631591797f, 0.0000000000000000000f, -0.57974255084991455078f, 0.19324752688407897949f, 0.19324752688407897949f, -0.19324752688407897949f, -0.19324752688407897949f, 0.19324752688407897949f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, -0.19324752688407897949f, 0.0000000000000000000f}
};
static const float quantized_tensor_Gemm_0_bias[10] = 
{-0.19324752688407897949f, 0.38649505376815795898f, 0.38649505376815795898f, 0.38649505376815795898f, 0.0000000000000000000f, 0.19324752688407897949f, 0.0000000000000000000f, 0.0000000000000000000f, 0.0000000000000000000f, 0.57974255084991455078f};
static const float quantized_tensor_Gemm_1_weight[10][10] = 
{
  {0.35953569412231445312f, 0.23969046771526336670f, 0.23969046771526336670f, 0.83891665935516357422f, 0.0000000000000000000f, -0.11984523385763168335f, 0.11984523385763168335f, 1.0786070823669433594f, -0.83891665935516357422f, 0.35953569412231445312f},
  {0.11984523385763168335f, 0.59922617673873901367f, -0.83891665935516357422f, -1.4381427764892578125f, 0.23969046771526336670f, 0.47938093543052673340f, -0.23969046771526336670f, -0.71907138824462890625f, -0.47938093543052673340f, 1.3182976245880126953f},
  {1.7976784706115722656f, 0.59922617673873901367f, -0.71907138824462890625f, 0.0000000000000000000f, 0.11984523385763168335f, 0.23969046771526336670f, 0.0000000000000000000f, -0.59922617673873901367f, 0.11984523385763168335f, 0.47938093543052673340f},
  {0.47938093543052673340f, 1.4381427764892578125f, -0.11984523385763168335f, -1.3182976245880126953f, 0.0000000000000000000f, -0.11984523385763168335f, 0.0000000000000000000f, 0.71907138824462890625f, -0.59922617673873901367f, -0.71907138824462890625f},
  {-0.47938093543052673340f, -1.5579880475997924805f, -0.11984523385763168335f, 1.1984523534774780273f, 0.0000000000000000000f, 0.23969046771526336670f, -0.35953569412231445312f, -0.59922617673873901367f, 0.71907138824462890625f, -0.47938093543052673340f},
  {-0.71907138824462890625f, 0.35953569412231445312f, -0.11984523385763168335f, 0.11984523385763168335f, -0.11984523385763168335f, -0.11984523385763168335f, 0.0000000000000000000f, 1.0786070823669433594f, -0.11984523385763168335f, -0.47938093543052673340f},
  {-0.11984523385763168335f, 0.59922617673873901367f, -0.95876187086105346680f, 1.5579880475997924805f, 0.23969046771526336670f, 0.35953569412231445312f, 0.23969046771526336670f, -0.95876187086105346680f, 0.23969046771526336670f, -0.71907138824462890625f},
  {-0.23969046771526336670f, -0.83891665935516357422f, 1.4381427764892578125f, -0.95876187086105346680f, 0.11984523385763168335f, -0.11984523385763168335f, -0.11984523385763168335f, -0.23969046771526336670f, -0.23969046771526336670f, 0.59922617673873901367f},
  {0.47938093543052673340f, 0.23969046771526336670f, -0.35953569412231445312f, -0.35953569412231445312f, 0.35953569412231445312f, 0.0000000000000000000f, -0.23969046771526336670f, 0.71907138824462890625f, 0.71907138824462890625f, 0.35953569412231445312f},
  {-0.35953569412231445312f, -0.95876187086105346680f, 0.95876187086105346680f, 0.11984523385763168335f, 0.23969046771526336670f, -0.23969046771526336670f, -0.23969046771526336670f, -0.47938093543052673340f, 0.23969046771526336670f, -0.23969046771526336670f}
};
static const float quantized_tensor_Gemm_1_bias[10] = 
{-1.7976784706115722656f, 1.0786070823669433594f, -0.95876187086105346680f, 0.0000000000000000000f, 0.59922617673873901367f, 0.0000000000000000000f, -0.59922617673873901367f, 0.35953569412231445312f, -0.35953569412231445312f, 0.71907138824462890625f};
float quantized_tensor_onnx__Gemm_5[1][64];
float quantized_tensor_onnx__Gemm_7[1][10];

float quantized_tensor_input[1][10];


static inline void quantized_node_Flatten_0( const float quantized_tensor_onnx__Flatten_0[1][64], float quantized_tensor_onnx__Gemm_5[1][64] )
{
	/* Flatten*/
	float *input = (float*)quantized_tensor_onnx__Flatten_0;
	float *output = (float*)quantized_tensor_onnx__Gemm_5;
	for( uint32_t i=0; i<64; i++ )
		output[i] = input[i];

}

static inline void quantized_node_Gemm_1( const float quantized_tensor_onnx__Gemm_5[1][64], const float quantized_tensor_Gemm_0_weight[10][64], const float quantized_tensor_Gemm_0_bias[10], float quantized_tensor_input[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 64;
	const int N = 10;
	float (*A)[64]  = (float(*)[64])quantized_tensor_onnx__Gemm_5;
	float (*Y)[10]  = (float(*)[10])quantized_tensor_input;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])quantized_tensor_Gemm_0_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = quantized_tensor_Gemm_0_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void quantized_node_Relu_2( const float quantized_tensor_input[1][10], float quantized_tensor_onnx__Gemm_7[1][10] )
{
	/*Relu*/
	float *X = (float*)quantized_tensor_input;
	float *Y = (float*)quantized_tensor_onnx__Gemm_7;
	for( uint32_t i=0; i<10; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void quantized_node_Gemm_3( const float quantized_tensor_onnx__Gemm_7[1][10], const float quantized_tensor_Gemm_1_weight[10][10], const float quantized_tensor_Gemm_1_bias[10], float quantized_tensor_8[1][10] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 10;
	const int N = 10;
	float (*A)[10]  = (float(*)[10])quantized_tensor_onnx__Gemm_7;
	float (*Y)[10]  = (float(*)[10])quantized_tensor_8;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[10]  = (float(*)[10])quantized_tensor_Gemm_1_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = quantized_tensor_Gemm_1_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}


void quantized(const float quantized_tensor_onnx__Flatten_0[1][64], float quantized_tensor_8[1][10]) {
	quantized_node_Flatten_0( quantized_tensor_onnx__Flatten_0, quantized_tensor_onnx__Gemm_5);
	quantized_node_Gemm_1( quantized_tensor_onnx__Gemm_5, quantized_tensor_Gemm_0_weight, quantized_tensor_Gemm_0_bias, quantized_tensor_input);
	quantized_node_Relu_2( quantized_tensor_input, quantized_tensor_onnx__Gemm_7);
	quantized_node_Gemm_3( quantized_tensor_onnx__Gemm_7, quantized_tensor_Gemm_1_weight, quantized_tensor_Gemm_1_bias, quantized_tensor_8);
}

#endif // QUANTIZED_H

