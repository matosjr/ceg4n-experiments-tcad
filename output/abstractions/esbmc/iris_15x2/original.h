
#ifndef ORIGINAL_H
#define ORIGINAL_H
// This file is computer-generated by onnx2c 
// (TODO: add creating command line here)
// (TODO: print creation date here )

// ONNX model:
// produced by pytorch, version 1.11.0
// ONNX IR version: 9
// Model documentation: 
/*

*/

#include <float.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#define MAX(X,Y) ( X > Y ? X : Y)
#define MIN(X,Y) ( X < Y ? X : Y)
#define CLIP(X,L) ( MAX(MIN(X,L), -L) )

static const float tensor_Gemm_0_weight[15][4] = 
{
  {0.28576707839965820312f, 0.22212010622024536133f, -0.15483744442462921143f, 0.52768623828887939453f},
  {0.33644628524780273438f, 0.016413867473602294922f, -0.36280584335327148438f, -0.49338215589523315430f},
  {0.62268936634063720703f, -0.28173270821571350098f, 0.28591540455818176270f, 1.3984171152114868164f},
  {0.095703840255737304688f, 0.070588767528533935547f, 0.15843069553375244141f, -0.33432894945144653320f},
  {-0.38508936762809753418f, -0.066722720861434936523f, 0.22725977003574371338f, 0.49910643696784973145f},
  {0.24592894315719604492f, -0.080592423677444458008f, 0.25518900156021118164f, 0.90869772434234619141f},
  {-0.17601001262664794922f, -0.076551020145416259766f, -0.37412494421005249023f, -0.17246848344802856445f},
  {0.041420824825763702393f, 0.41452190279960632324f, -0.015447953715920448303f, -0.076739072799682617188f},
  {-0.35455858707427978516f, -0.44971632957458496094f, -0.29892426729202270508f, -0.27380108833312988281f},
  {-0.059030354022979736328f, 0.21991294622421264648f, 0.43475252389907836914f, -0.15332841873168945312f},
  {0.30243930220603942871f, 0.44076499342918395996f, 0.45472526550292968750f, 1.0148558616638183594f},
  {0.18835817277431488037f, 0.67210364341735839844f, -0.15388399362564086914f, 0.49419009685516357422f},
  {0.28105890750885009766f, -0.34399247169494628906f, 0.83968383073806762695f, 0.24469953775405883789f},
  {0.48977059125900268555f, -0.30817827582359313965f, -0.24732284247875213623f, -0.43719390034675598145f},
  {-0.083661250770092010498f, 0.97924202680587768555f, -1.0750108957290649414f, -1.4608396291732788086f}
};
static const float tensor_Gemm_0_bias[15] = 
{-0.30680340528488159180f, -0.28898477554321289062f, -0.10754256695508956909f, -0.31353563070297241211f, -0.11752536892890930176f, -0.22274357080459594727f, -0.22415584325790405273f, -0.14609479904174804688f, -0.070314884185791015625f, -0.45422005653381347656f, 0.11646474152803421021f, 0.60923671722412109375f, 0.052840460091829299927f, 0.12669607996940612793f, 1.8409858942031860352f};
static const float tensor_Gemm_1_weight[15][15] = 
{
  {-0.19566752016544342041f, 0.20798416435718536377f, -0.70017218589782714844f, -0.21032315492630004883f, -0.19306707382202148438f, -0.42132005095481872559f, 0.020332951098680496216f, -0.15204270184040069580f, 0.20521707832813262939f, -0.25181621313095092773f, -0.092180192470550537109f, 0.58477085828781127930f, -0.33701345324516296387f, -0.056109521538019180298f, 2.1731686592102050781f},
  {-0.21580362319946289062f, 0.10200329869985580444f, -0.54183036088943481445f, -0.13216470181941986084f, 0.057420447468757629395f, -0.36220905184745788574f, -0.014547104947268962860f, 0.19936417043209075928f, 0.095205448567867279053f, -0.12453305721282958984f, -0.33422693610191345215f, 0.22931043803691864014f, -0.12413296103477478027f, 0.23712363839149475098f, 0.70737266540527343750f},
  {0.30794033408164978027f, -0.10392573475837707520f, 0.79476642608642578125f, -0.15007969737052917480f, 0.37744700908660888672f, 0.58796244859695434570f, -0.15362592041492462158f, -0.13727580010890960693f, -0.12224184721708297729f, -0.24068842828273773193f, 0.66157209873199462891f, 0.49899581074714660645f, 0.28235682845115661621f, 0.075056731700897216797f, -0.97201526165008544922f},
  {-0.17587481439113616943f, 0.088555462658405303955f, 0.10737786442041397095f, 0.14475181698799133301f, 0.080084666609764099121f, 0.20083677768707275391f, -0.22952944040298461914f, 0.18298603594303131104f, 0.24895432591438293457f, 0.053084619343280792236f, -0.17063401639461517334f, -0.18764244019985198975f, 0.063473261892795562744f, 0.034039985388517379761f, 0.12379209697246551514f},
  {0.25372824072837829590f, 0.25516539812088012695f, -0.18716241419315338135f, -0.091653995215892791748f, -0.23428338766098022461f, 0.13131435215473175049f, 0.12046610563993453979f, 0.063167698681354522705f, 0.068257354199886322021f, -0.023119807243347167969f, -0.11954136192798614502f, -0.057840183377265930176f, 0.18653972446918487549f, -0.22580419480800628662f, 0.032941855490207672119f},
  {0.21545621752738952637f, -0.24594074487686157227f, 0.077441237866878509521f, 0.13322348892688751221f, -0.25770658254623413086f, 0.18090304732322692871f, -0.12029179930686950684f, -0.040854096412658691406f, -0.035661488771438598633f, 0.17572097480297088623f, 0.16439525783061981201f, -0.17346066236495971680f, -0.18825171887874603271f, 0.17141163349151611328f, -0.24604550004005432129f},
  {0.14079196751117706299f, 0.21688316762447357178f, 0.81463181972503662109f, 0.14065253734588623047f, -0.084648758172988891602f, 0.26801434159278869629f, -0.070644810795783996582f, -0.18724022805690765381f, 0.12065589427947998047f, -0.12990002334117889404f, 0.77649509906768798828f, 0.37136748433113098145f, 0.58656644821166992188f, 0.051852494478225708008f, -0.65011161565780639648f},
  {0.060345645993947982788f, 0.24096909165382385254f, -0.049609128385782241821f, -0.045603152364492416382f, 0.16901195049285888672f, -0.034305490553379058838f, 0.11161851137876510620f, 0.19425441324710845947f, 0.12357568740844726562f, -0.047349222004413604736f, -0.13892176747322082520f, -0.17520950734615325928f, 0.020302047953009605408f, 0.067118659615516662598f, 0.15787036716938018799f},
  {0.16225941479206085205f, 0.18879680335521697998f, -0.070869855582714080811f, -0.16181503236293792725f, -0.15841107070446014404f, -0.23785518109798431396f, 0.21333524584770202637f, 0.10813909024000167847f, 0.018557023257017135620f, 0.14394812285900115967f, 0.0027335325721651315689f, 0.20789815485477447510f, 0.0049489028751850128174f, -0.081195816397666931152f, -0.10618915408849716187f},
  {-0.23968636989593505859f, -0.18166859447956085205f, -0.14469549059867858887f, -0.24376633763313293457f, 0.14980229735374450684f, -0.054393280297517776489f, -0.21837696433067321777f, -0.13661526143550872803f, 0.25776672363281250000f, 0.039072405546903610229f, -0.12073625624179840088f, -0.18177388608455657959f, 0.17219182848930358887f, -0.21993903815746307373f, 0.11383230984210968018f},
  {0.24394477903842926025f, 0.21255116164684295654f, 0.0091282967478036880493f, 0.19024570286273956299f, -0.22790464758872985840f, 0.25873464345932006836f, 0.18727102875709533691f, 0.026470081880688667297f, -0.029176915064454078674f, 0.23930962383747100830f, 0.042021010071039199829f, 0.0039198244921863079071f, -0.16546323895454406738f, 0.16461943089962005615f, -0.10127790272235870361f},
  {-0.17054420709609985352f, -0.20621885359287261963f, 0.23684838414192199707f, -0.11304853856563568115f, 0.020856279879808425903f, -0.19322195649147033691f, -0.11221914738416671753f, -0.12403224408626556396f, -0.093983307480812072754f, 0.055182717740535736084f, 0.22382205724716186523f, 0.21139921247959136963f, 0.30152741074562072754f, -0.13277891278266906738f, -0.21462203562259674072f},
  {-0.24023281037807464600f, -0.23813356459140777588f, -0.20469295978546142578f, -0.019278530031442642212f, -0.21832747757434844971f, 0.076822049915790557861f, -0.031537994742393493652f, -0.18696756660938262939f, 0.22405464947223663330f, -0.25354200601577758789f, 0.00096540548838675022125f, 0.15236344933509826660f, 0.062228068709373474121f, 0.0079878261312842369080f, -0.097082577645778656006f},
  {-0.19032490253448486328f, -0.10778274387121200562f, -0.21429714560508728027f, 0.23069053888320922852f, -0.17423896491527557373f, -0.13628426194190979004f, 0.24439187347888946533f, -0.0022842851467430591583f, -0.065346024930477142334f, -0.17245604097843170166f, -0.0047655603848397731781f, 0.19387567043304443359f, 0.16672009229660034180f, -0.21818397939205169678f, -0.22261871397495269775f},
  {-0.0093742692843079566956f, -0.066686913371086120605f, -0.082344152033329010010f, 0.035906527191400527954f, -0.11473920941352844238f, 0.12702231109142303467f, -0.21823036670684814453f, -0.062180988490581512451f, -0.23477691411972045898f, 0.028942033648490905762f, -0.079264827072620391846f, 0.16058786213397979736f, 0.13086031377315521240f, -0.0049519501626491546631f, -0.13306237757205963135f}
};
static const float tensor_Gemm_1_bias[15] = 
{1.0965132713317871094f, 0.12735421955585479736f, 0.19358317553997039795f, -0.18579468131065368652f, 0.020118175074458122253f, -0.20156860351562500000f, 0.42269852757453918457f, -0.22971294820308685303f, -0.12389753758907318115f, -0.17716921865940093994f, 0.18183745443820953369f, 0.53959667682647705078f, -0.15219271183013916016f, -0.12353841215372085571f, 0.20135766267776489258f};
static const float tensor_Gemm_2_weight[3][15] = 
{
  {1.4502552747726440430f, 0.67039340734481811523f, -1.3153437376022338867f, 0.11541385948657989502f, -0.23881205916404724121f, 0.069697827100753784180f, -1.4109348058700561523f, -0.012906638905405998230f, -0.026379045099020004272f, -0.079613864421844482422f, 0.0018521924503147602081f, -0.61863535642623901367f, -0.23588930070400238037f, 0.065503463149070739746f, -0.29847663640975952148f},
  {0.86420482397079467773f, -0.71608531475067138672f, -0.28386068344116210938f, 0.12951380014419555664f, 0.12116730213165283203f, 0.090650737285614013672f, 0.11859500408172607422f, 0.080881372094154357910f, -0.14571423828601837158f, -0.13616399466991424561f, 0.16881856322288513184f, 0.50991535186767578125f, -0.084793411195278167725f, 0.22325620055198669434f, -0.094917155802249908447f},
  {-1.9601167440414428711f, -0.13894198834896087646f, 1.0525740385055541992f, 0.15811926126480102539f, -0.051470503211021423340f, 0.13311050832271575928f, 0.72791731357574462891f, -0.065672628581523895264f, -0.055595103651285171509f, -0.23242962360382080078f, 0.20865598320960998535f, -0.087479420006275177002f, -0.23428869247436523438f, 0.18347105383872985840f, -0.20341107249259948730f}
};
static const float tensor_Gemm_2_bias[3] = 
{0.041032601147890090942f, 0.50054967403411865234f, -0.86969494819641113281f};
float tensor_onnx__Gemm_7[1][4];
float tensor_onnx__Gemm_9[1][15];
float tensor_onnx__Gemm_11[1][15];

float tensor_input[1][15];
float tensor_input_3[1][15];


static inline void node_Flatten_0( const float tensor_onnx__Flatten_0[1][4], float tensor_onnx__Gemm_7[1][4] )
{
	/* Flatten*/
	float *input = (float*)tensor_onnx__Flatten_0;
	float *output = (float*)tensor_onnx__Gemm_7;
	for( uint32_t i=0; i<4; i++ )
		output[i] = input[i];

}

static inline void node_Gemm_1( const float tensor_onnx__Gemm_7[1][4], const float tensor_Gemm_0_weight[15][4], const float tensor_Gemm_0_bias[15], float tensor_input[1][15] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 4;
	const int N = 15;
	float (*A)[4]  = (float(*)[4])tensor_onnx__Gemm_7;
	float (*Y)[15]  = (float(*)[15])tensor_input;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[15]  = (float(*)[15])tensor_Gemm_0_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_0_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void node_Relu_2( const float tensor_input[1][15], float tensor_onnx__Gemm_9[1][15] )
{
	/*Relu*/
	float *X = (float*)tensor_input;
	float *Y = (float*)tensor_onnx__Gemm_9;
	for( uint32_t i=0; i<15; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void node_Gemm_3( const float tensor_onnx__Gemm_9[1][15], const float tensor_Gemm_1_weight[15][15], const float tensor_Gemm_1_bias[15], float tensor_input_3[1][15] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 15;
	const int N = 15;
	float (*A)[15]  = (float(*)[15])tensor_onnx__Gemm_9;
	float (*Y)[15]  = (float(*)[15])tensor_input_3;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[15]  = (float(*)[15])tensor_Gemm_1_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_1_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}

static inline void node_Relu_4( const float tensor_input_3[1][15], float tensor_onnx__Gemm_11[1][15] )
{
	/*Relu*/
	float *X = (float*)tensor_input_3;
	float *Y = (float*)tensor_onnx__Gemm_11;
	for( uint32_t i=0; i<15; i++ )
		Y[i] = X[i] > 0 ? X[i] : 0;

}

static inline void node_Gemm_5( const float tensor_onnx__Gemm_11[1][15], const float tensor_Gemm_2_weight[3][15], const float tensor_Gemm_2_bias[3], float tensor_12[1][3] )
{
	/* Gemm */
	/* alpha   = 1.0000000000000000000
	   beta    = 1.0000000000000000000
	   transA  = 0
	   transB  = 1
	 */
	const int M = 1;
	const int K = 15;
	const int N = 3;
	float (*A)[15]  = (float(*)[15])tensor_onnx__Gemm_11;
	float (*Y)[3]  = (float(*)[3])tensor_12;
	float alpha = 1.0000000000000000000;
	float beta = 1.0000000000000000000;
	float (*C)[3]  = (float(*)[3])tensor_Gemm_2_bias;
	for( uint32_t r=0; r<M; r++ )
		for( uint32_t c=0; c<N; c++ ) {
			float ABrc = 0;
			for( uint32_t i=0; i<K; i++ ) {
				float B = tensor_Gemm_2_weight[c][i];
				ABrc += A[r][i] * B;
			}
			float tmp = ABrc * alpha;
			tmp += C[0][c] * beta;
			Y[r][c] = tmp;
	}
}


void original(const float tensor_onnx__Flatten_0[1][4], float tensor_12[1][3]) {
	node_Flatten_0( tensor_onnx__Flatten_0, tensor_onnx__Gemm_7);
	node_Gemm_1( tensor_onnx__Gemm_7, tensor_Gemm_0_weight, tensor_Gemm_0_bias, tensor_input);
	node_Relu_2( tensor_input, tensor_onnx__Gemm_9);
	node_Gemm_3( tensor_onnx__Gemm_9, tensor_Gemm_1_weight, tensor_Gemm_1_bias, tensor_input_3);
	node_Relu_4( tensor_input_3, tensor_onnx__Gemm_11);
	node_Gemm_5( tensor_onnx__Gemm_11, tensor_Gemm_2_weight, tensor_Gemm_2_bias, tensor_12);
}

#endif // ORIGINAL_H

